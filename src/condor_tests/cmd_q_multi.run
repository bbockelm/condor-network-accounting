#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;


$cmd_template = "cmd_q_multi.template";
$testdesc =  'cmd_q_multi - Simple Condor-C A&B with Vanilla job';
$testname = "cmd_q_multi";
$corename = "cmd_q_multi";

# where am I running
$currenthost = CondorTest::getFqdnHost();
$primarycollector = $currenthost;

print scalar localtime() . "\n";

$mypid = $$;
print "my PID = $pid\n";

$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".out";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",1);

my $version = $mypid . "local";
# get a local scheduler running (side a)
my $configloc = CondorTest::StartPersonal( "cmd_q_multi", "x_param.cmdq-multi" ,$version);
my @local = split /\+/, $configloc;
my $locconfig = shift @local;
my $locport = shift @local;

CondorTest::debug("---local config is $locconfig and local port is $locport---\n",1);

$primarycollector = $primarycollector . ":" . $locport;

CondorTest::debug("Primary collector for other nodes <<$primarycollector>>\n",1);

$saveconfig = $ENV{CONDOR_CONFIG};
$ENV{CONDOR_CONFIG} = $locconfig;
runcmd("condor_config_val COLLECTOR_HOST");
$ENV{CONDOR_CONFIG} = $saveconfig;

my $line;
open(SCHEDDSRC,"<x_param.cmdq-multi.template") || die "Could not open x_param.cmdq-multi.template: $!\n";
open(SCHEDDONE,">x_param.cmdq-multi-one") || die "Could not open x_param.cmdq-multi-one: $!\n";
while(<SCHEDDSRC>) {
	$line = $_;
	chomp($line);
	if($line =~ /^\s*nameschedd\s*=.*$/) {
		print SCHEDDONE "nameschedd = scheddone\n";
	} elsif($line =~ /^\s*collector\s*=.*$/) {
		print SCHEDDONE "collector  = $primarycollector\n";
	} else {
		print SCHEDDONE "$line\n";
	}
}
close(SCHEDDSRC);
close(SCHEDDONE);

$version = $mypid . "scheddone";
# get another node running
my $configscheddone = CondorTest::StartPersonal( "cmd_q_multi", "x_param.cmdq-multi-one" ,$version);
my @scheddone = split /\+/, $configscheddone;
my $scheddoneconfig = shift @scheddone;
my $scheddoneport = shift @scheddone;

CondorTest::debug("---scheddone config is $scheddoneconfig and scheddone port is $scheddoneport---\n",1);

my $bail = 0;

# submit into scheddone
$ENV{CONDOR_CONFIG} = $scheddoneconfig;

my $forever = CondorTest::verbose_system("./x_cmdrunforever.pl $pid");
if($forever != 0) {
	CondorTest::debug("Bailing because running job failed to submit\n",1);
	$bail = 1;
}

# submit into collector node schedd
$ENV{CONDOR_CONFIG} = $locconfig;

my $holdone;
if($bail != 1) {
	my $holdone = CondorTest::verbose_system("./x_cmdstartonhold.pl $pid");
	if($holdone != 0) {
		CondorTest::debug("Bailing because running job failed to submit\n",1);
		$bail = 1;
	}
}

my $cmdstatus;
my @adarray;
my $sched1 = "master_" . $mypid . "local";
my $sched2 = "master_" . $mypid . "scheddone";

CondorTest::debug("Looking for sched1($sched1) and sched2($sched2)\n",1);

# allow time for all the nodes to update the collector
# by allowing N attempts
my $nattempts = 5;
my $count = 0;
my $done = 0;
my $found1 = 0;
my $found2 = 0;

if($bail != 1) {
	while($count < $nattempts) {
		$found1 = 0;
		$found2 = 0;
		my $cmd = "condor_q -global";
		$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
    	if(!$cmdstatus)
    	{
        	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
        	exit(1)
    	}

CondorTest::debug("Looking for sched1($sched1) and sched2($sched2)\n",1);

		foreach $line (@adarray) {
			if($line =~ /^.*($sched1).*$/) {
				CondorTest::debug("found $sched1: $line\n",1);
				$found1 = 1;
			} elsif($line =~ /^.*($sched2).*$/) {
				CondorTest::debug("found $sched2: $line\n",1);
				$found2 = 1;
			} else {
				#print "skip: $line\n";
			}
		}
		if(($found1 == 1) && ($found2 == 1)){
			CondorTest::debug("Happy and quitting\n",1);
			$done = 1;
			last;
		} else {
			CondorTest::debug("Unhappy: <$found1> && <$found2>\n",1);
		}

		$count = $count + 1;
		sleep($count * 2);
	}
}

runcmd("cp *cmd_q_shows-global* $mysaveme");

if( -e "$mysubmitnm" )
{
	runcmd("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	runcmd("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	runcmd("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($locconfig);
CondorTest::KillPersonal($scheddoneconfig);
print scalar localtime() . "\n";

if( $done == 0 )
{
	# actual test failed but we allowed cleanup
	exit(1);
}

CondorTest::debug("cmd_q_multi SUCCESS\n",1);
exit(0);
