#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;
use Cwd;
use strict;
use warnings;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

my $testdesc =  'fetch_work-basic';
my $testname = "fetch_work-basic";
my $corename = "fetch_work-basic";
my $debuglevel = 2;

# where am I running
my $currenthost = CondorTest::getFqdnHost();
my $primarycollector = $currenthost;
my @adarray;

print scalar localtime() . "\n";

my $mypid = $$;
my $mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

my $mysubmitnm = $corename . $mypid . ".cmd";
my $mysubmitnmlog = $corename . $mypid . ".log";
my $mysubmitnmout = $corename . $mypid . ".out";
my $mycorenm = $corename . ".cmd";
my $mycorenmout = $corename . ".cmd.out";
my $mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",$debuglevel);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",$debuglevel);

my $topdir = getcwd();
CondorTest::debug("Running here: $topdir\n",$debuglevel);

my $workfetchscripts = $topdir . "/" . $mysaveme . "/" . "$mypid" . "/" . "workfetch_scripts";
my $work = $topdir . "/" . $mysaveme . "/" . "$mypid" . "/" . "work";
my $results = $topdir . "/" . $mysaveme . "/" . "$mypid" . "/" . "results";
my $scripts = "x_fetchwork_scripts.tar.gz";
CondorTest::debug("Work fetch scripts here: $workfetchscripts\n",$debuglevel);

runcmd("mkdir -p $workfetchscripts");
runcmd("cp $scripts $workfetchscripts");

runcmd("mkdir -p $work");
runcmd("mkdir -p $results");

my $here = getcwd();
chdir("$workfetchscripts");
###### extract work fetch scripts ######
runcmd("tar -zxf $scripts");
if( !(-f "job_fetch.pl")) {
	CondorTest::debug("Failed to setup fetch scripts\n",$debuglevel);
	runcmd("pwd");
	runcmd("ls");
	exit(1);
} else {
	CondorTest::debug("Have setup fetch scripts\n",$debuglevel);
	#runcmd("pwd");
	#runcmd("ls");
}
###### tie to this unique test ######
my $targetdir = '.';
CondorTest::debug("Directory to change is $targetdir\n",$debuglevel);
opendir DH, $targetdir or die "Can not open $targetdir:$!\n";
foreach my $file (readdir DH)
{
	my $new = $file . ".new";
    my $line = "";
    next if $file =~ /^\.\.?$/;
    next if $file =~ /^.*\.txt$/;
    next if $file =~ /^.*\.tar\.gz$/;
	CondorTest::debug("Edit $file.......\n",$debuglevel);
	open(OLD,"<$file") || die "Can not open $file:$!\n";
	open(NEW,">$new") || die "Can not open $new:$!\n";
	while(<OLD>) {
		chomp();
		$line = $_;
		if($line =~ /^(.*)--WORK--(.*)$/) {
			print NEW "$1$work$2\n";
		} elsif($line =~ /^(.*)--RESULTS--(.*)$/) {
			print NEW "$1$results$2\n";
		} else {
			print NEW "$line\n";
		}
	}
	close(NEW);
	close(OLD);
	runcmd("mv $file $file.old");
	runcmd("mv $new $file");
	runcmd("chmod 755 $file");
}

chdir("$here");

my $line;
open(POSTFIGSRC,"<x_fetch_configpostsrc.template") || die "Could not open x_fetch_configpostsrc.template: $!\n";
open(POSTFIGDONE,">x_fetch_configpostsrc") || die "Could not open x_fetch_configpostsrc: $!\n";
while(<POSTFIGSRC>) {
	$line = $_;
	chomp($line);
	if($line =~ /^\s*(.*)\s+=\s+xxxxxx(.*)$/) {
		print POSTFIGDONE "$1 = $workfetchscripts/$2\n";
	} else {
		print POSTFIGDONE "$line\n";
	}
}
close(POSTFIGSRC);
close(POSTFIGDONE);

my $version = "fetch";
# get a local scheduler running (side a)
my $configloc = CondorTest::StartPersonal( "fetch_work-basic", "x_param.fetch-basic" ,$version);
my @fetch = split /\+/, $configloc;
my $locconfig = shift @fetch;
my $locport = shift @fetch;

CondorTest::debug("---fetch config is $locconfig and local port is $locport---\n",$debuglevel);

$primarycollector = $primarycollector . ":" . $locport;

CondorTest::debug("Primary collector for other nodes <<$primarycollector>>\n",$debuglevel);

$ENV{CONDOR_CONFIG} = $locconfig;
CondorTest::debug("New collector is this:\n",$debuglevel);
runcmd("condor_config_val COLLECTOR_HOST");

my $bail = 0;

my $fetchstatus = CondorTest::verbose_system("./fetch_work-basic.pl $work $results $version");
CondorTest::debug("Status of work fetch is \"$fetchstatus\"\n",$debuglevel);

CondorTest::debug("Saving things and cleaning up....\n",$debuglevel);

#fails due to directory matching the pattern
runcmd("cp *fetch_work-basic* $mysaveme", {expect_result=>\&ANY});

if( -e "$mysubmitnm" )
{
	runcmd("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	runcmd("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	runcmd("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($locconfig);
print scalar localtime() . "\n";

if( $fetchstatus != 0 )
{
	# actual test failed but we allowed cleanup
	CondorTest::debug("fetck_work-basic FAILED\n",$debuglevel);
	print scalar localtime() . "\n";
	exit(1);
}

CondorTest::debug("fetck_work-basic SUCCESS\n",$debuglevel);
exit(0);
