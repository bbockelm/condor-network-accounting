#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

runcmd("rm -f job_dagman_splice-R-lower.err");
runcmd("rm -f job_dagman_splice-R-lower.log");
runcmd("rm -f job_dagman_splice-R-lower.out");
runcmd("rm -f job_dagman_splice-R-upper.dag.condor.sub");
runcmd("rm -f job_dagman_splice-R-upper.dag.dagman.log");
runcmd("rm -f job_dagman_splice-R-upper.dag.dagman.out");
runcmd("rm -f job_dagman_splice-R-upper.dag.lib.err");
runcmd("rm -f job_dagman_splice-R-upper.dag.lib.out");
runcmd("rm -f job_dagman_splice-R-upper.dag.out");

$cmd = 'job_dagman_splice-R-upper.dag';
$testdesc =  'Condor submit splice dag - setting variable from high level - scheduler U';
$testname = "job_dagman_splice-R";
$dagman_args = "-verbose";

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
};

$success = sub
{
	open INPUT, "<job_dagman_splice-R-lower.out" || die "Could not open job_dagman_splice-R-lower.out";
	my @input = <INPUT>;
	die "Expected only one line in job_dagman_splice-R-lower.out\n" if ((scalar @input)>1);
	chomp(@input);
	die "Expected only to see \"bar\" in job_dagman_splice-R-lower.out\n" if($input[0] ne "bar");
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

