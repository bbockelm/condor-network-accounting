#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;


$cmd_template = "cmd_chirp_get-set_par.template";
$testdesc =  'cmd_chirp_get-set_par - Simple parallel job';
$testname = "cmd_chirp_get-set_par";
$cmd = "cmd_chirp_get-set_par.cmd";
$corename = "cmd_chirp_get-set_par";

# where am I running
$currenthost = CondorTest::getFqdnHost();

print scalar localtime() . "\n";

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmcmdout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log" ;
$mysubmitnmerr = $corename . $mypid . ".err" . "\$(NODE)";
$mysubmitnmout = $corename . $mypid . ".out" . "\$(NODE)";
$mycorenm = $corename . ".cmd";
$mycorenmcmdout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";
$mycorenmerr = $corename . ".err";
$mycorenmout = $corename . ".out";

#print "Master PID is $mypid\n";
#print "Master PID submit file is $mysubmitnm\n";

# get a remote scheduler running (side b)
my $configrem = CondorTest::StartPersonal( "cmd_chirp_get-set_par", "x_param.chirpparallel" ,"parallel");
my @parallel = split /\+/, $configrem;
my $parallelconfig = shift @parallel;
my $parallelport = shift @parallel;

CondorTest::debug("---Parallel config is $parallelconfig and remote port is $parallelport---\n",1);

$ENV{CONDOR_CONFIG} = $parallelconfig;

CondorTest::debug("Set config to $parallelconfig\n",1);

#print "Looking for schedd for Basic Parallel Test\n";
system("condor_status -pool $currenthost:$parallelport -schedd -format '%s\n' Name");

# we need to pass the location of condor_chirp on this system
$condorchirp = `which condor_chirp`;
chomp($condorchirp);

CondorTest::debug("Testing this condor_chirp:$condorchirp\n",1);

# Edit submit file to submit to scheduler at remote (side b) schedd.
my $line;
open(CSUB,">$mysubmitnm") || die "Can't open new submit file $mysubmitnm: $!\n";
open(TPLATE,"<$cmd_template") || die "Can't open submit file template $cmd_template: $!\n";
while(<TPLATE>)
{
	CondorUtils::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*log\s*= .*$/)
	{
		my $lognm = $mysubmitnmlog;
		#print "New log name: $lognm\n";
		print CSUB "log = $lognm\n";
	}
	elsif( $line =~ /^\s*output\s*= .*$/)
	{
		my $outputnm = $mysubmitnmout;
		#print "New out name: $outputnm\n";
		print CSUB "output = $outputnm\n";
	}
	elsif( $line =~ /^\s*error\s*= .*$/)
	{
		my $errornm = $mysubmitnmerr;
		#print "New error name: $errornm\n";
		print CSUB "error = $errornm\n";
	}
	elsif( $line =~ /^(.*)basic_par_socket(.*)$/)
	{
		my $newargs = $1 . " " . $mypid . " " . $2; 
		#print "New  args are < $newargs >\n";
		print CSUB "$newargs\n";
	}
	elsif( $line =~ /^\s*arguments\s*= .*$/)
	{
		print CSUB "arguements = \$(NODE) $condorchirp\n";
	}
	else
	{
		#print "template: $line\n";
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);


# make test data
system("./x_chirpio_mkdata.pl --message='Testing message'");
# remove marker files which pace parallel job
system("rm -rf ALLDONE WRITEDONE");

my $result = system("./cmd_chirp_get-set_par.pl $mysubmitnm");
CondorTest::debug("Result of chirp paarallel  job is  $result\n",1);


system("cp *cmd_chirp_get-set_par* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmcmdout $mycorenmcmdout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($parallelconfig);
print scalar localtime() . "\n";

if( $result != 0 )
{
	# actual test failed but we allowed cleanup
	exit(1);
}
exit(0);
