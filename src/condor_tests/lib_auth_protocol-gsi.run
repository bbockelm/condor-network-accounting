#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

use Cwd;


my $topleveldir = getcwd();

$param_template = "x_param.protocol-gsi.template";
$testdesc =  'lib_auth_protocol-gsi - Security Protocol GSI Authentication Test';
$testname = "lib_auth_protocol-gsi";
$corename = "lib_auth_protocol-gsi";
$mycustomconfig = "x_secgsi_configpostsrc";
$mytestnegotiation = "x_secneg_clR_dmnR_secprepostsrc";
$mytestnegotiation_result = "yes";
$mycmdfile = "lib_auth_protocol-gsi.cmd";
$mygsicerts = "x_lib_auth-gsi_keys.tgz";

$mycafile = "gsi_keys/certificates";
$mycadir = "gsi_keys";
$mycertfile = "gsi_keys/hostcert.pem";
$mykeyfile = "gsi_keys/hostkey.pem";
$mygridmap = "gsi_keys/mapfiles/grid-mapfile";
$myx509certdir = "gsi_keys/certificates";

# where am I running
$currenthost = CondorTest::getFqdnHost();

print scalar localtime() . "\n";

$pid = $$;
$mypid = $pid;

$pidleveldir = $topleveldir . "/" . $mypid;
system("mkdir -p $pidleveldir");
chdir("$pidleveldir");
system("tar -zxvf ../$mygsicerts");
chdir("$topleveldir");

$myvariation = 1;

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

#print "$line\n";
$myparamname = $corename . $mypid . ".param";
$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".log";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",1);

# Edit submit file to submit to scheduler at securitypool (side b) schedd.
my $line;
open(CSUB,">$myparamname") || die "Can't open new submit file $myparamname: $!\n";
open(TPLATE,"<$param_template") || die "Can't open param template $param_template: $!\n";
while(<TPLATE>)
{
	CondorUtils::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*secprepostsrc\s*=\s*.*$/ )
	{
		CondorTest::debug("Setting up for $mytestnegotiation\n",1);
		print CSUB "secprepostsrc = $mytestnegotiation\n";
	}
	else
	{
		CondorTest::debug("template: $line\n",1);
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);
sleep 10;

my $configtemplate = $mycustomconfig . ".template";
CondorTest::debug("\n\n",1);
CondorTest::debug("***********************************************\n",1);
CondorTest::debug("***********************************************\n",1);
CondorTest::debug("***   Test X509_USER_PROXY dies 8/10/2007   ***\n",1);
CondorTest::debug("***********************************************\n",1);
CondorTest::debug("***********************************************\n",1);
CondorTest::debug("\n\n",1);
open(CONFIG,">$mycustomconfig") || die "Can't open new postconfig file $mycustomconfig: $!\n";
open(CONFIGTPLATE,"<$configtemplate") || die "Can't open postconfig template $configtemplate: $!\n";
while(<CONFIGTPLATE>)
{
	$tmp = "";
	CondorUtils::fullchomp($_);
	$line = $_;
	if($line =~ /^GSI_DAEMON_CERT\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_CERT = $tmp\n";
	} elsif($line =~ /^GSI_DAEMON_KEY\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_KEY = $tmp\n";
	} elsif($line =~ /^GSI_DAEMON_TRUSTED_CA_DIR\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_TRUSTED_CA_DIR = $tmp\n";
	} elsif($line =~ /^GSI_DAEMON_DIRECTORY\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_DIRECTORY = $tmp\n";
	} elsif($line =~ /^GRIDMAP\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GRIDMAP = $tmp\n";
	} elsif($line =~ /^X509_CERT_DIR\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "X509_CERT_DIR = $tmp\n";
		$ENV{X509_CERT_DIR} = $tmp;
		CondorTest::debug("Set $ENV{X509_CERT_DIR} into the environment\n",1);
	} elsif($line =~ /^X509_USER_PROXY\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "X509_USER_PROXY = $tmp\n";
		$ENV{X509_USER_PROXY} = $tmp;
		CondorTest::debug("Set $ENV{X509_USER_PROXY} into the environment\n",1);
	} else {
		print CONFIG "$line\n";
	}

}
close(CONFIG);
close(CONFIGTPLATE);

my $configsec = CondorTest::StartPersonal( "lib_auth_protocol-gsi", $myparamname ,"protocol", $mypid);
my @securitypool = split /\+/, $configsec;
my $secconfig = shift @securitypool;
my $secport = shift @securitypool;

CondorTest::debug("---security config is $secconfig and securitypool port is $secport---\n",1);
	

$ENV{CONDOR_CONFIG} = $secconfig;
# submit into local schedd (side a)

my $result = system("./x_lib_auth_protocol.pl $mypid \"protocol\" $mytestnegotiation_result $mycmdfile \"gsi\"");
CondorTest::debug("Result of crafted lib_auth_protocol job is  $result\n",1);

system("cp *$corename* $mysaveme");
	
if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($secconfig);
print scalar localtime() . "\n";

if($result != 0)
{
    # actual job failed but we allowed cleanup
    exit(1);
}

CondorTest::debug("lib_auth_protocol-gsi SUCCESS\n",1);
exit(0);
