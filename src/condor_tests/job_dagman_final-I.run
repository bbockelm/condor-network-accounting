#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# Tests DAG halt/final node combination.

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_final-I.dag';
$testdesc =  'Condor submit dag - basic final node test I - scheduler U';
$testname = "job_dagman_final-I";
$dagman_args = "-verbose";

$outfile = "job_dagman_final-I.nodes.out";
$scriptfile = "job_dagman_final-I.scripts.out";
$rescuefile = "job_dagman_final-I.dag.rescue001";
$haltfile = "job_dagman_final-I.dag.halt";

# Note: we must find these lines *in the specified order*.
@node_output_lines = ("Job for node I_A",
			"  DAG_STATUS=0",
			"  FAILED_COUNT=0",
			"  OK done with I_A",
			"Job for node I_B",
			"  DAG_STATUS=0",
			"  FAILED_COUNT=0",
			"  Halting DAG",
			"  OK done with I_B",
			"Job for node I_D",
			"  DAG_STATUS=6",
			"  FAILED_COUNT=0",
			"  OK done with I_D");

# Note: we must find these lines *in the specified order*.
@script_output_lines = ("Node I_D Pre",
			"  DAG_STATUS=6",
			"  FAILED_COUNT=0",
			"  RETURN=-1",
			"Node I_D Post",
			"  DAG_STATUS=6",
			"  FAILED_COUNT=0",
			"  RETURN=0");

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing output files.
if (-e $outfile) {
	runcmd("rm -f $outfile");
}
if (-e $scriptfile) {
	runcmd("rm -f $scriptfile");
}
runcmd("rm -f job_dagman_final-I.dag.rescue*");

# Get rid of halt file if it exists.
if (-e $haltfile) {
	runcmd("rm -f $haltfile");
}

$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
};

$success = sub
{
	CondorTest::debug("executed successfully\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;

	# Make sure all expected lines are in the node output file, in the
	# correct order, and there aren't any "extra" lines.
	CondorTest::debug("Checking $outfile\n",1);
	open(CHECK, "<$outfile") ||
			die "Cannot open $outfile: $!\n";
	@lines = <CHECK>;
	close(CHECK);
	$max = $#node_output_lines > $#lines ? $#node_output_lines : $#lines;
	for ($lineindex = 0; $lineindex <= $max; $lineindex++) {
		$line = $lines[$lineindex];
		chomp($line);
		if ($line eq $node_output_lines[$lineindex]) {
			CondorTest::debug("$line\n", 1);
		} else {
			$diditpass = 0;
			CondorTest::debug("Mismatch at line $lineindex: expected <$node_output_lines[$lineindex]>, got <$line>\n", 1);
		}
	}

	# Make sure all expected lines are in the script output file, in the
	# correct order, and there aren't any "extra" lines.
	CondorTest::debug("Checking $scriptfile\n",1);
	open(CHECK, "<$scriptfile") ||
			die "Cannot open $scriptfile: $!\n";
	@lines = <CHECK>;
	close(CHECK);
	$max = $#script_output_lines > $#lines ? $#script_output_lines : $#lines;
	for ($lineindex = 0; $lineindex <= $max; $lineindex++) {
		$line = $lines[$lineindex];
		chomp($line);
		if ($line eq $script_output_lines[$lineindex]) {
			CondorTest::debug("$line\n", 1);
		} else {
			$diditpass = 0;
			CondorTest::debug("Mismatch at line $lineindex: expected <$script_output_lines[$lineindex]>, got <$line>\n", 1);
		}
	}

	if (! -e $rescuefile) {
		CondorTest::debug("Expected rescue DAG $rescuefile does not exist\n");
		$diditpass = 0;
	}

	if($diditpass == 0) {
		die "All expected files and correct output failed\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success );
CondorTest::RegisterExecute($testname, $executed );
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

