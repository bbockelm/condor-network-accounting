#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorPersonal;

use Cwd;
$quillpassword = "x_job_quill_basic.template";
$testdesc =  'job_quill_basic - install postgress and test quillpp';
$testname = "job_quill_basic";
$cmd = "job_quill_basic.cmd";
$corename = "job_quill_basic";
$supwfile = "x_job_quill_supw";
$topdir = getcwd();

# where am I running
$currenthost = CondorTest::getFqdnHost();

print scalar localtime() . "\n";

$mypid = $$;
$mysaveme = $corename . ".saveme";

$myquillname = "pgsql" . $mypid;

$mypid = CondorPersonal::SaveMeSetup($corename);
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$myquillpiddir = $mysaveme . "/" . $mypid . "/" . $myquillname;
$myfullpgsqlloc = $topdir . "/" . $myquillpiddir;
$myfullpgsqlinstalllog = $myfullpgsqlloc . "/postgress_install.log" ;
system("mkdir $myquillpiddir");
system("ln -s $myquillpiddir $myquillname");

# find the version of the current external
$testbin_dir = "$topdir/";
CondorTest::debug("Searching $testbin_dir for Postgres installations:\n",1);
system("ls $testbin_dir");

opendir( POSTG, $testbin_dir) || die "Error opening testbin dir<$testbin_dir>: $!\n";
@versions = readdir( POSTG );
closedir( POSTG );
# filter out files that aren't postgresql installation dirs
@versions = grep /^postgresql-/, @versions;
$keepversion = "";
foreach $version (@versions) {
	CondorTest::debug("Found PG version $version\n",1);
	if($version =~ /postgresql-8.2.3/) {
	#if($version =~ /postgresql-8.0.2/) {
		CondorTest::debug("PG version is: $version\n",1);
		$keepversion = $version;
	}
}
if($keepversion eq "") {
	die "Can't find mandated 8.0.2 version of Postgres\n";
} else {
	CondorTest::debug("Using PG version $keepversion\n",1);
}

$postgres_dir = $testbin_dir . "/" . $keepversion;
CondorTest::debug("Postgress install dir is $postgres_dir\n",1);

$myextralibs = $topdir . "/libs/lib";

$mycondorconfigadd = $topdir . "/x_quill_config_postsrc";
my $myresult;

$topdir = getcwd();
$installdir = $topdir . "/perllib";
$ENV{PERL5LIB} = $installdir . "/lib/site_perl" . ":" . $installdir . "/lib/perl5/site_perl" . ":" . $installdir . "/lib64/perl5/site_perl" . ":" . $installdir . "/lib64/site_perl" . ":" . $installdir . "/Library/Perl";
CondorTest::debug("Adjusted Perl Library search to $ENV{PERL5LIB}\n",1);
my $newpath = $ENV{PATH} = "$postgres_dir" . "/bin:" . $ENV{PATH};

CondorTest::debug("NEW Path is now <<$newpath>>\n",1);

chdir("$topdir");

CondorTest::debug("About to install Perl Modules: <<<",1);
print scalar localtime() . "\n";
CondorTest::debug(">>>\n",1);

$perlinstall = system("./x_quill_buildperlmods.pl");
CondorTest::debug("Perl module install result was $perlinstall\n",1);

CondorTest::debug("Current SysV IPC state\n",1);
system("ipcs -a");

CondorTest::debug("About to install Postgres: <<<",1);
print scalar localtime() . "\n";
CondorTest::debug(">>>\n",1);

chdir("$topdir");
system("mkdir -p $myquillname");
if( -d $myquillname ) {
	system("cp $supwfile $myquillname");
	$pgresult = system("./x_quill_pgsqlinstall.pl $myfullpgsqlloc $myfullpgsqlinstalllog $postgres_dir $mycondorconfigadd $myextralibs $topdir");
	CondorTest::debug("Result of Quill Postgresssql db install job is  <<$pgresult>>\n",1);
	if($pgresult != 0) {
		CondorTest::debug("Could not start POSTGRESS\n",1);
	}
	CondorTest::debug("cp -r $myfullpgsqlinstalllog $mysaveme start......\n",1);
	print scalar localtime() . "\n";
	system("cp -r $myfullpgsqlinstalllog $mysaveme");
	CondorTest::debug("cp -r $myfullpgsqlinstalllog $mysaveme end......\n",1);
	print scalar localtime() . "\n";
} else {
	$pgresult = 7;
	CondorTest::debug("Could not create Quill postgress db install location\n",1);
}

if($pgresult != 0) {
	die "Failed to build and install Postgress\n";
} else {
	CondorTest::debug("Hmmmmmmmmmmmmmm build and install Postgress maybe worked........\n",1);
}


chdir("$topdir");

CondorTest::debug("About to set up Condor Personal : <<<",1);
print scalar localtime() . "\n";
CondorTest::debug(">>>\n",1);

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmcmdout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmerr = $corename . $mypid . ".err";
$mysubmitnmout = $corename . $mypid . ".out";
$mycorenm = $corename . ".cmd";
$mycorenmcmdout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";
$mycorenmerr = $corename . ".err";
$mycorenmout = $corename . ".out";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",1);

CondorPersonal::DebugOn();
my $configrem;

if($pgresult == 0) {
	$configrem = CondorTest::StartPersonal( "job_quill_basic", "x_param.quill" ,"quill");
}

my @quill = split /\+/, $configrem;
my $quillconfig = shift @quill;
my $quillport = shift @quill;

CondorTest::debug("---Quill config is $quillconfig and remote port is $quillport---\n",1);
CondorTest::debug("About to start jobs and test : <<<",1);
print scalar localtime() . "\n";
CondorTest::debug(">>>\n",1);

$ENV{CONDOR_CONFIG} = $quillconfig;

$spool = `condor_config_val spool`;
chomp($spool);
CondorTest::debug("Spool for quill is <$spool>>\n",1);
$cmdforsys = "cp " . $quillpassword . " " . $spool . "/.quillwritepassword";
CondorTest::debug("Command to create quill password file is <<<$cmdforsys>>>\n",1);

system("$cmdforsys");
#$pgpassdata = $topdir . "/" . $mypid . "/pgpass";

#$cmdforsys = "cp " . $pgpassdata . " " . $spool . "/.pgpass";
#print "Command to create quill password file is <<<$cmdforsys>>>\n";

#system("$cmdforsys");

CondorTest::debug("Set config to $quillconfig\n",1);

my $pcresult = 0;
my $result = 0;

CondorTest::debug("Everything ready to test the running condor\n",1);
print scalar localtime() . "\n";
if($pgresult == 0) {
	$pcresult = system("./job_quill_basic.pl $mysubmitnm");
	CondorTest::debug("Result of job_quill_basic job is  $pcresult\n",1);
}

system("cp *quill_basic* $mysaveme");
# catch the ads which were compared.... 
system("cp quill_*_ads $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmcmdout $mycorenmcmdout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($quillconfig);
print scalar localtime() . "\n";

if($pcresult == 0) {
	CondorTest::debug("Setup allowed test which then WORKED!!!......\n",1);
	# now shutdown postgress when not in use....

	$result = system("./x_quill_pgsqlstop.pl $myfullpgsqlloc ");
	CondorTest::debug("Result of Quill Postgresssql db stop job is  $result\n",1);
} else {
	CondorTest::debug("Setup allowed test which then failed......\n",1);
	exit(1);
}

CondorTest::debug("job_quill_basic SUCCESS\n",1);
exit(0);
