#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_always_run_post-B.dag';
$testdesc =  'Condor DAGman test for not running the POST script B- scheduler U';
$testname = "job_dagman_always_run_post-B";
$dagman_args = "-verbose -DontAlwaysRunPost";

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

##**************************************************************
##
## This test checks that the command line option 
## -DontAlwaysRunPost is not ignored by DAGman
##
##**************************************************************

# TEMP -- to-do: add check of jobstate.log file.

runcmd("rm -f $testname.dag.dagman.out");

$abnormal = sub 
{
	die "Want to see only submit, execute and failure\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and failure\n",1);
};

# Actually expect failure
$failure = sub {
	my %info = shift;
	open OUT, "<$testname.dag.dagman.out" || die "Could not open $testname.dag.dagman.out\n";
	@outfile = <OUT>;
	close(OUT);
	$diditpass = 0;
	$passed1 = 1; $passed2 = 0; $passed3 = 0;
	foreach (@outfile) {
		if(/PRE Script of Job B_A failed with status/) {
			CondorTest::debug("Saw PRE script for B_A run and fail, as expected.\n");
			$passed1 = 0;
			next;
		}
		if(/Node B_A job completed/){
			CondorTest::debug("Oh no, B_A job should not have run\n");
			$passed2 = 1;
			next;
		}
		if(/Running POST script of Node B_A/) {
			CondorTest::debug("Oh no, POST script for B_A should not have run.\n");
			$passed3 = 1;
			next;
		}
	}
	if( $passed1 == 0 && $passed2 == 0 && $passed3 == 0 ) {
		$diditpass = 1;
	}
	if( $diditpass == 0 ) {
		die "Correct output failed in $testname.dag.dagman.out\n";
	}
};

# Actually expect failure
$success = sub {
	die("Successful completion is NOT expected\n");	
};

CondorTest::RegisterExitedSuccess( $testname, $success );
CondorTest::RegisterExitedFailure( $testname, $failure );
CondorTest::RegisterExecute( $testname, $executed );
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}
