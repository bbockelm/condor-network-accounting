#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

use Cwd;


$myparamname = "x_param.protocol-pw";
$postsrc_template = "x_secpw_configpostsrc.template";
$map_template = "x_secpw_mapfile.template";
$postsrc = "x_secpw_configpostsrc";
$mapfile = "x_secpw_mapfile";

$testdesc =  'lib_auth_protocol-pw - Security Protocol PASSWORD Authentication Test';
$testname = "lib_auth_protocol-pw";
$corename = "lib_auth_protocol-pw";
$mytestnegotiation_result = "yes";
$mycmdfile = "lib_auth_protocol-pw.cmd";


# where am I running
$currenthost = CondorTest::getFqdnHost();

print scalar localtime() . "\n";
$myvariation = 1;

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

#print "$line\n";
$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".log";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",1);

# Edit security password file and map file
my $line;
open(CSUB,">$postsrc") || die "Can't open new submit file $myparamname: $!\n";
open(TPLATE,"<$postsrc_template") || die "Can't open param template $postsrc_template: $!\n";
while(<TPLATE>)
{
	CondorUtils::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*SEC_PASSWORD_FILE\s*=\s*.*$/ )
	{
		print CSUB "SEC_PASSWORD_FILE = $mypwfile\n";
	}
	elsif( $line =~ /^\s*CERTIFICATE_MAP_FILE\s*=\s*.*$/ )
	{
		print CSUB "CERTIFICATE_MAP_FILE = $mymapfile\n";
	}
	else
	{
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);

# Edit security password file and map file
my $line;

my $username = `whoami`;
chomp($username);
CondorTest::debug("Our user is <<<$username>>>\n",1);

open(CSUB,">$mapfile") || die "Can't open new submit file $myparamname: $!\n";
open(TPLATE,"<$map_template") || die "Can't open param template $postsrc_template: $!\n";
while(<TPLATE>)
{
	CondorUtils::fullchomp($_);
	$line = $_;
	if( $line =~ /^(\s*PASSWORD\s*\(\.\*\))s*.*$/ )
	{
		print CSUB "$1 $username \n";
	}
	else
	{
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);

my $configsec = CondorTest::StartPersonal( "lib_auth_protocol-pw", $myparamname ,"protocol", $mypid);
my @securitypool = split /\+/, $configsec;
my $secconfig = shift @securitypool;
my $secport = shift @securitypool;

CondorTest::debug("---security config is $secconfig and securitypool port is $secport---\n",1);


$ENV{CONDOR_CONFIG} = $secconfig;

# we pre- seeded the password file.....

#my @pwarray;
#my $status = 1;
#my $passwd = "foobar2";
#my $cmd = "condor_store_cred -c -password $passwd add";
#$status = CondorTest::runCondorTool($cmd,\@pwarray,2);
#if(!$status)
#{
	#print "Test failure due to Condor Tool Failure<$cmd>\n";
#}

# submit into local schedd (side a)

my $result = system("./x_lib_auth_protocol.pl $mypid \"protocol\" $mytestnegotiation_result $mycmdfile \"pw\"");
CondorTest::debug("Result of crafted lib_auth_protocol job is  $result\n",1);

system("cp *$corename* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

# At this point we have a pool which is doing FS or PASSWORD authenticating
# which let us store a pool password. Now we remove FS as an option forcing
# only PASSWORD authenticating daemon to daemon and restart....

# Turn off condor

CondorTest::KillPersonal($secconfig);
print scalar localtime() . "\n";

if($result != 0)
{
    # actuaal job failed but we allowed cleanup
    exit(1);
}

CondorTest::debug("lib_auth_protocol-pw SUCCESS\n",1);
exit(0);
