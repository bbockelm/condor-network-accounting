#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

use Cwd;


$testdesc =  'job_stork_file-file - Simple stork job';
$testname = "job_stork_file-file";
$corename = "job_stork_file-file";
$topdir = getcwd();

CondorTest::debug("Working Directory is $topdir\n",1);

# where am I running
$currenthost = CondorTest::getFqdnHost();

print scalar localtime() . "\n";

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".log";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",1);

my $configloc = CondorTest::StartPersonal( "job_stork_file-file", "x_param.storksrvr" ,"local");
my @local = split /\+/, $configloc;
my $locconfig = shift @local;
my $locport = shift @local;

CondorTest::debug("---local config is $locconfig and local port is $locport---\n",1);

$ENV{CONDOR_CONFIG} = $locconfig;
# submit into stork personal condor

my $storkdatafile = "stork_file-file_data" . $mypid;
system("./x_create_md5data.pl --megs=10 --filenm=$storkdatafile");

if( ! -e "job_stork_file-file.in" )
{
	system("date > job_stork_file-file.in");
}

CondorTest::debug("Have generated data and md5 checksum in $storkdatafile\n",1);
my $src_url = $topdir . "/$storkdatafile";
my $dest_url = "/tmp/$storkdatafile";

CondorTest::debug("Transfer $src_url to $dest_url\n",1);

my $storksubmitfile = "job_stork_file-file.stork" . $mypid;

my $line = "";
open(STORKSTUB,"<job_stork_file-file.stork") || die "Could not open data file 'job_stork_file-file.stork': $?";
open(NEWSTORKSTUB,">$storksubmitfile") || die "Could not open test stork submit file <$storksubmitfile>: $?";
while(<STORKSTUB>)
{
	CondorUtils::fullchomp();
	$line = $_;
	if($line =~ /src_url/)
	{
		print NEWSTORKSTUB "src_url = \"file:/$src_url\";\n"
	}
	elsif($line =~ /dest_url/)
	{
		print NEWSTORKSTUB "dest_url = \"file:/$dest_url\";\n"
	}
	else
	{
		print NEWSTORKSTUB "$line\n"
	}
}
close(STORKSTUB);
close(NEWSTORKSTUB);

my $storkcmd = "stork_submit $storksubmitfile";
my $line = "";
my $jobid = "";
open(PULL, "$storkcmd 2>&1 |") || die "ps -eo pid failed: $!\n";
while(<PULL>)
{
	CondorUtils::fullchomp();
	$line = $_;
	if($line =~ /assigned\s*id\s*:\s*(\d+)/)
	{
		CondorTest::debug("<<<$line>>>\n",1);
		$jobid = $1;
	}
}
close(PULLL);

if($jobid eq ""){ die "Stork test can not determine jobid!\n"; }

# going to loop for a bit see if we can see stork job completion
# and then check the md5 of the transmitted file.
my $timeout = 180;
my $timecnt = 0;
my $storkstatuscmd = "stork_status $jobid";

my $jobstatus = "";

while( $timecnt < $timeout )
{
	#system("stork_q");
	system("stork_status $jobid");
	open(PULL, "$storkstatuscmd 2>&1 |") || die "ps -eo pid failed: $!\n";
	while(<PULL>)
	{
		CondorUtils::fullchomp();
		$line = $_;
		if($line =~ /status\s*=\s*"(\w+)"/)
		{
			CondorTest::debug("<<<$line>>>\n",1);
			$jobstatus = $1;
			last; # done with scanning status
		}
	}
	close(PULLL);
	if($jobstatus =~ /request_completed/)
	{
		CondorTest::debug("Good file has transfered, check md5 next\n",1);
		last;
	}
	$timecnt += 20;
	sleep(20);
}

CondorTest::debug("Done checking status\n",1);

my $result = 0;

if($jobstatus ne "request_completed")
{
	CondorTest::debug("Stork file transfer never completed!\n",1);
	$result = 1;
}
else
{
	$result = system("./x_test_md5data.pl --oldfile=$src_url --newfile=$dest_url");
	CondorTest::debug("Result of crafted Stork job is  $result\n",1);
}

system("rm -f $dest_url*");

system("cp job_stork_file-file.stork* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($locconfig);
print scalar localtime() . "\n";

if($result != 0)
{
    # actuaal job failed but we allowed cleanup
    exit(1);
}

CondorTest::debug("job_stork_file-file SUCCESS\n",1);
exit(0);
