#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

$cmd      = 'job_filexfer_output-withvacate_van.cmd';
$testdesc =  'file transfer - look for two sets of output files with a vacate test - vanilla U';
$testname = "job_filexfer_output-withvacate_van";

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

my $job = $$;
CondorTest::debug("Process Id for this script is  $job\n",1);
runcmd("rm -f submit_filetrans_input*");
runcmd("rm -f submit_filetrans_output*");
my $basefile = "submit_filetrans_input" . "$job";
my $in = "$basefile".".txt";
my $ina = "$basefile"."a.txt";
my $inb = "$basefile"."b.txt";
my $inc = "$basefile"."c.txt";

my $basefile = "submit_filetrans_output" . "$job";
my $oute = "$basefile"."e.txt";
my $outf = "$basefile"."f.txt";
my $outg = "$basefile"."g.txt";

my $inputdir = "job_"."$job"."_dir";

my $line = "";
my $args = "--job=$job --forever ";
my $alreadydone=0;

my $spool = "";
CondorUtils::fullchomp($spool);
CondorTest::debug("Spool is in --$spool--\n",1);

my $job = $$;
my $haveseenevict = 0;
my $haveseenrun = 0;

my $baseoutfile;
my $oute;
my $outf;
my $outg;
my $outh;
my $outi;
my $outj;

$execute = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};

	$spool = `condor_config_val SPOOL`;
	CondorUtils::fullchomp($spool);
	CondorTest::debug("Spool is in --$spool--\n",1);
	if($haveseenrun == 0) {
		$haveseenrun = 1;
	} else {
		return(0);
	}

	my $shared_spool_dir = $cluster % 10000;

	$baseoutfile = $spool . "/${shared_spool_dir}/0/cluster" . $cluster . ".proc0.subproc0/" . "submit_filetrans_output" . "$job";
	$oute = "$baseoutfile"."e.txt";
	$outf = "$baseoutfile"."f.txt";
	$outg = "$baseoutfile"."g.txt";
	$outh = "$baseoutfile"."h.txt";
	$outi = "$baseoutfile"."i.txt";
	$outj = "$baseoutfile"."j.txt";

	runcmd("rm -f $baseoutfile*");

	CondorTest::debug("Looking for $oute, $outf, $outg ...\n",1);

	sleep 20; # let output files get created
	CondorTest::debug("Vacate $cluster Now\n",1);
	my @adarray;
	my $status = 1;
	my $cmd = "condor_vacate_job $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status)
	{
		CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
		exit(1)
	}

};

$aborted = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};

	CondorTest::debug("Aborted job expected from condor_rm, ok.\n",1);
};

$evicted = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};

	print "Job was evicted\n";
	if($haveseenevict == 0) {
		$haveseenevict = 1;
	} else {
		return(0);
	}
	print "++++++++++++++++++++++++++++++++++++\n";
	print "++++++++++++++++++++++++++++++++++++\n";
	runcmd("ls $baseoutfile*");
	print "++++++++++++++++++++++++++++++++++++\n";
	sleep(15);
	runcmd("ls $baseoutfile*");
	print "++++++++++++++++++++++++++++++++++++\n";

	if(!(-f "$oute")) { 
		print "$oute failed to arrive\n"; 
		CondorTest::debug("removing $cluster\n",1);
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status) {
			CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
			exit(1)
		}
		exit(1)
	};
	if(!(-f "$outf")) { 
		print "$outf failed to arrive\n"; 
		CondorTest::debug("removing $cluster\n",1);
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status) {
			CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
			exit(1)
		}
		exit(1)
	};
	if(!(-f "$outg")) { 
		print "$outg failed to arrive\n"; 
		CondorTest::debug("removing $cluster\n",1);
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status) {
			CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
			exit(1)
		}
		exit(1)
	};

	# Cool getting to here means the files all arrived!
	CondorTest::debug("All files arrived as expected.....\n",1);
	my @adarray;
	my $status = 1;
	my $cmd = "condor_rm $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status) {
		CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
		exit(1)
	}
};

$success = sub
{
	CondorTest::debug("Base file transfer job!\n",1);
	if(!(-f "$oute")){ die "$oute failed to arrive\n"; exit(1)};
	if(!(-f "$outf")){ die "$outf failed to arrive\n"; exit(1)};
	if(!(-f "$outg")){ die "$outg failed to arrive\n"; exit(1)};
	CondorTest::debug("All files arrived as expected.....\n",1);
};

$hold = sub
{
	print "Job can end up on hold.\n";
};

$timed = sub
{
	die "Job should have ended by now. file transfer broken!\n";
};

$shadow = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};
	my $error = $args{"shadowerror"};

	CondorTest::debug("Shadow Error: Cluster $cluster: $error\n",1);
	my @adarray;
	my $status = 1;
	my $cmd = "condor_rm $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status)
	{
		CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
	}
	CondorTest::debug("$testname: SUCCESS\n",1);
};



# make some needed files. All 0 sized and xxxxxx.txt for
# easy cleanup


# pass pid for output file production
# open submitfile and fix
open(CMD,"<$cmd") || die "Can not open command file: $!\n";
open(NEWCMD,">$cmd.new") || die "Can not open command file: $!\n";
while(<CMD>)
{
	CondorUtils::fullchomp($_);
	CondorTest::debug("$_\n",1);
	$line = $_;
	if( $line =~ /^\s*input\s*=\s*job_\d+_dir\/([a-zA-Z_]+)\d*\.txt\s*$/)
	{
		my $input = "$1"."$job".".txt";
		CondorTest::debug("Input file was $1\n",1);
		print NEWCMD "input = $inputdir/$input\n"
	}
	elsif( $line =~ /^\s*transfer_input_files\s*=\s*.*$/ )
	{
		print NEWCMD "transfer_input_files = $inputdir/$ina,$inputdir/$inb,$inputdir/$inc\n";
	}
	elsif( $line =~ /^\s*transfer_output_files\s*=\s*.*$/ )
	{
		print NEWCMD "transfer_output_files = $oute,$outf,$outg\n";
	}
	elsif( $line =~ /^\s*arguments\s*=\s*.*$/)
	{
		print NEWCMD "arguments = $args\n";
	}
	else
	{
		print NEWCMD "$line\n";
	}

}
close(CMD);
close(NEWCMD);
runcmd("mv $cmd.new $cmd");

CondorTest::RegisterHold($testname, $hold);
CondorTest::RegisterExecute($testname, $execute);
CondorTest::RegisterShadow($testname, $shadow);
CondorTest::RegisterEvicted($testname, $evicted);
CondorTest::RegisterAbort($testname, $aborted);
CondorTest::RegisterExitedSuccess($testname, $success);
#CondorTest::RegisterTimed($testname, $timed, 3600);

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

