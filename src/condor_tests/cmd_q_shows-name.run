#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;
use strict;
use warnings;


my $cmd_template = "cmd_q_multi.template";
my $testdesc =  'cmd_q_shows-name - Simple condor_ -name test';
my $testname = "cmd_q_shows-name";
my $corename = "cmd_q_shows-name";
my $debuglevel = 2;

# where am I running
my $currenthost = CondorTest::getFqdnHost();
my $primarycollector = $currenthost;

print scalar localtime() . "\n";

my $mypid = $$;
print "my PID = $mypid\n";

my $mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

my $mysubmitnm = $corename . $mypid . ".cmd";
my $mysubmitnmlog = $corename . $mypid . ".log";
my $mysubmitnmout = $corename . $mypid . ".out";
my $mycorenm = $corename . ".cmd";
my $mycorenmout = $corename . ".cmd.out";
my $mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",$debuglevel);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",$debuglevel);

print "Set up a pool and central manager\n";
my $version = "local";
# get a local scheduler running (side a)
my $configloc = CondorTest::StartPersonal( "cmd_q_shows-name", "x_param.cmdq-multi" ,$version);
my @local = split /\+/, $configloc;
my $locconfig = shift @local;
my $locport = shift @local;

CondorTest::debug("---local config is $locconfig and local port is $locport---\n",$debuglevel);

$primarycollector = $primarycollector . ":" . $locport;

CondorTest::debug("Primary collector for other nodes <<$primarycollector>>\n",$debuglevel);

print "ok\n";

my $saveconfig = $ENV{CONDOR_CONFIG};
$ENV{CONDOR_CONFIG} = $locconfig;
runcmd("condor_config_val COLLECTOR_HOST");
$ENV{CONDOR_CONFIG} = $saveconfig;

my $line;
open(SCHEDDSRC,"<x_param.cmdq-multi.template") || die "Could not open x_param.cmdq-multi.template: $!\n";
open(SCHEDDONE,">x_param.cmd_q_shows-name") || die "Could not open x_param.cmd_q_shows-name: $!\n";
while(<SCHEDDSRC>) {
	$line = $_;
	chomp($line);
	if($line =~ /^\s*nameschedd\s*=.*$/) {
		print SCHEDDONE "nameschedd = scheddone\n";
	} elsif($line =~ /^\s*collector\s*=.*$/) {
		print SCHEDDONE "collector  = $primarycollector\n";
	} else {
		print SCHEDDONE "$line\n";
	}
}
close(SCHEDDSRC);
close(SCHEDDONE);

print "Set up a machine with startd and schedd to connect central manager\n";

$version = "scheddone";
# get another node running
my $configscheddone = CondorTest::StartPersonal( "cmd_q_shows-name", "x_param.cmd_q_shows-name" ,$version);
my @scheddone = split /\+/, $configscheddone;
my $scheddoneconfig = shift @scheddone;
my $scheddoneport = shift @scheddone;

CondorTest::debug("---scheddone config is $scheddoneconfig and scheddone port is $scheddoneport---\n",$debuglevel);

print "ok\n";
my $bail = 0;

# submit into scheddone
$ENV{CONDOR_CONFIG} = $scheddoneconfig;

print "Start a job which runs from remote schedd - ";
my $forever = CondorTest::verbose_system("./x_cmdrunforever.pl $mypid\n");
if($forever != 0) {
	print "bad\n";
	CondorTest::debug("Bailing because running job failed to submit\n",$debuglevel);
	$bail = 1;
}
print "ok\n";

# submit into collector node schedd
$ENV{CONDOR_CONFIG} = $locconfig;

print "Start a job on hold from local schedd - ";
my $holdone;
if($bail != 1) {
	my $holdone = CondorTest::verbose_system("./x_cmdstartonhold.pl $mypid");
	if($holdone != 0) {
		print "bad\n";
		CondorTest::debug("Bailing because running job failed to submit\n",$debuglevel);
		$bail = 1;
	}
}
print "ok\n";

my $cmdstatus;
my @adarray;
my $sched1 = "master_local_schd" . "@" . $currenthost;;
my $sched2 = "master_scheddone_schd" . "@" . $currenthost;;

CondorTest::debug("Looking for sched1($sched1) and sched2($sched2)\n",$debuglevel);

# allow time for all the nodes to update the collector
# by allowing N attempts
my $nattempts = 8;
my $count = 0;
my $done = 0;
my $found1 = 0;
my $targets = 0;

if($bail != 1) {
	my @schedds = ( $sched1, $sched2 );
	foreach my $schedd (@schedds) {
		CondorTest::debug("Looking for condor_q -name $schedd\n",$debuglevel);
		while($count < $nattempts) {
			$found1 = 0;
			my $cmd = "condor_q -name $schedd";
			$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
	    	if(!$cmdstatus)
	    	{
	        	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",$debuglevel);
				CondorTest::KillPersonal($locconfig);
				CondorTest::KillPersonal($scheddoneconfig);
	        	exit(1)
	    	}

			CondorTest::debug("Looking for schedd($schedd)\n",$debuglevel);

			foreach $line (@adarray) {
				if($line =~ /^.*($schedd).*$/) {
					CondorTest::debug("found $schedd: $line\n",$debuglevel);
					$targets += 1;
					$found1 = 1;
				} else {
					CondorTest::debug("skip: $line\n",$debuglevel);
				}
			}
			if($found1 == 1){
				CondorTest::debug("Happy and quitting\n",$debuglevel);
				$done = 1;
				last;
			} else {
				CondorTest::debug("Unhappy: <$found1> \n",$debuglevel);
			}

			$count = $count + 1;
			sleep($count * 5);
		}
		if($found1 == 0) {
			last;
		}
	}

	print "Checking that condor_q -name can see specific schedds - ";
	if($targets != 2) {
		print "bad\n";
		CondorTest::KillPersonal($locconfig);
		CondorTest::KillPersonal($scheddoneconfig);
		exit(1);
	}
	print "ok\n";
}

#fails due to omitting directory cmd_q_shows-name.saveme
runcmd("cp *cmd_q_shows-name* $mysaveme", {expect_result=>\&ANY});

if( -e "$mysubmitnm" )
{
	runcmd("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	runcmd("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	runcmd("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($locconfig);
CondorTest::KillPersonal($scheddoneconfig);
print scalar localtime() . "\n";

if( $done == 0 )
{
	# actual test failed but we allowed cleanup
	exit(1);
}

CondorTest::debug("cmd_q_shows-name SUCCESS\n",$debuglevel);
exit(0);
