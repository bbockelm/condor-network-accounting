/***************************************************************
 *
 * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
 * University of Wisconsin-Madison, WI.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************/

#define _CONDOR_ALLOW_OPEN 1
#include "condor_common.h"
#include "condor_nfs.h"
#include "condor_classad.h"
#include "condor_debug.h"
#include "std_univ_io.h"
#include "condor_sys.h"
#include "condor_mmap.h"
#include "startup.h"
#include "pseudo_ops.h"
#include "../condor_shadow.std/job_report.h"

	/*
	Have assert() really call EXCEPT instead of doing a sigabrt 
	and dumping core.  This change results in a shadow exception when
	communication with the remote job is interrupted in the middle of 
	a remote system call, instead of the shadow dumping core in the
	user's current working directory.
	Note: the definition to CONDOR_ASSERT() macro is in condor_debug.h
	-Todd <tannenba@cs.wisc.edu> 10/10/2000
	*/
#ifdef assert
#	undef assert
#endif
#define assert(cond) CONDOR_ASSERT(cond)

/* get rid of the access remap to access_euid for the syscall library */
#ifdef access
#	undef access
#endif

#if defined(Solaris)
extern "C" {
	int flock( int, int );
}
#endif

#if defined(HPUX)
extern "C" {
	int flock( int, int );
}
#endif

#if defined(LINUX)
extern "C" {
	
	ssize_t getdirentries(int fd, char *buf, size_t nbytes, off_t *basep);
	ssize_t getdirentries64(int fd, char *buf, size_t nbytes, off64_t *basep);

	/*
	There is no public interface to getdents in the Linux C library.
	So, here we provide one based on a better-known public function.
	*/

	/* It angers me that this is here because basically it creates a definition
		for getdents when linking with the standard universe shadow.
		-psilord */

	static int getdents( int fd, struct dirent *buf, size_t nbytes ) {
		off_t basep;
		basep = lseek(fd,0,SEEK_CUR);
		return getdirentries(fd,(char*)buf,nbytes,&basep);
	}

	static int getdents64( int fd, struct dirent64 *buf, size_t nbytes ) {
		off64_t basep;
		basep = lseek64(fd,0,SEEK_CUR);
		return getdirentries64(fd,(char*)buf,nbytes,&basep);
	}
}
#endif

#if defined(Solaris) || defined(LINUX)
/* there doesn't seem to be a correct prototype of this in the header files.. */
extern "C" {
int getdents64( int fd, struct dirent64 *buf, size_t nbytes );
}
#endif

#include "../condor_syscall_lib/syscall_param_sizes.h"

extern StdUnivSock *syscall_sock;

#if defined(SYSCALL_DEBUG)
	extern char *SyscallLabel;
#endif

int CONDOR_NotSupported( int num, ... );
int CONDOR_Ignored( int num, ... );

#if defined(USE_STUB_CLUMPS)
int do_REMOTE_syscall1(int);
int do_REMOTE_syscall2(int);
int do_REMOTE_syscall3(int);
int do_REMOTE_syscall4(int);
int do_REMOTE_syscall5(int);
#endif

#if !defined(PVM_RECEIVE)
int
do_REMOTE_syscall()
{
	int condor_sysnum;
	int	rval;

	syscall_sock->decode();

	rval = syscall_sock->code(condor_sysnum);
	if(!rval) {
		const char *error;
		if(errno==0) {
			error = "disconnected";
		} else {
			error = strerror(errno);
		}
		EXCEPT("Unable to talk to job: %s\n",error);
	}

#if defined(SYSCALL_DEBUG)
	sprintf( SyscallLabel, "%-6d", condor_sysnum );
#endif

	dprintf(D_SYSCALLS,
		"Got request for syscall %d <%s>\n",
		condor_sysnum, _condor_syscall_name(condor_sysnum)
	);

	job_report_store_call( condor_sysnum );

	switch( condor_sysnum ) {
#else

#include "joblist.h"
extern struct tagJobList	*JobList;

#include "prototypes.h"

int
do_REMOTE_syscall(StdUnivSock *sock, int process)
{
	int condor_sysnum;
	int rval;
	int	read_ok;

	syscall_sock->decode();

	read_ok = syscall_sock->code(condor_sysnum);

	if( !read_ok ) {
		dprintf( D_ALWAYS, 
		"Failed to get syscall_code for proc %d removing..\n", process);

		RemoveProc( process );
		return -1;
	}

	dprintf( D_SYSCALLS, "Shadow: got request for syscall %d <%s>\n",
			condor_sysnum, _condor_syscall_name(condor_sysnum) );

	switch( condor_sysnum ) {
        case CONDOR_work_request:
          {
                ClassAd *ad = NULL;
                char *a_out;
                char *targ;
                char *orig;
                condor_signal_t *kill_sig;
                condor_errno_t terrno;

                kill_sig = (condor_signal_t *)malloc( (unsigned)INT_SIZE );
                orig = NULL;
                targ = NULL;
                a_out = NULL;
		/* space for ad allocated by pseudo_work_req */
                assert( syscall_sock->end_of_message() );;

                errno = 0;
                rval = pseudo_work_request( ad, a_out, targ, orig, (int *)kill_sig );
                terrno = (condor_errno_t)errno;
                dprintf( D_SYSCALLS, "\trval = %d, errno = %d\n", rval, (int)terrno);

                syscall_sock->encode();
                assert( syscall_sock->code(rval) );
                if( rval < 0 ) {
                        assert( syscall_sock->code(terrno) );
                }
                if( rval >= 0 ) {
                        assert( syscall_sock->code(kill_sig) );
                        assert( syscall_sock->code(orig) );
                        assert( syscall_sock->code(targ) );
                        assert( syscall_sock->code(a_out) );
			assert( ad->put(*syscall_sock) );
                }
                free( (char *)kill_sig );
                free( (char *)orig );
                free( (char *)targ );
                free( (char *)a_out );
		if ( ad != NULL ) delete ad;
                assert( syscall_sock->end_of_message() );;
                return 0;
        }
#endif  // of ifdef PVM_RECEIVE
	case CONDOR_startup_info_request:
	  {
		STARTUP_INFO *s;
		condor_errno_t terrno;

		s = (STARTUP_INFO *)malloc( (unsigned)STARTUP_INFO_SIZE );
		memset( s, 0, (unsigned)STARTUP_INFO_SIZE );
		assert( syscall_sock->end_of_message() );;

		errno = 0;
		rval = pseudo_startup_info_request( s );
		terrno = (condor_errno_t)errno;
		dprintf( D_SYSCALLS, "\trval = %d, errno = %d\n", rval, (int)terrno );
		syscall_sock->encode();
		assert( syscall_sock->code(rval) );
		if( rval < 0 ) {
			assert( syscall_sock->code(terrno) );
		}
		if( rval >= 0 ) {
			assert( syscall_sock->code(s) );
		}
		free( s->cmd );
		free( s->args_v1or2 );
		free( s->env_v1or2 );
		free( s->iwd );
		free( s );

		assert( syscall_sock->end_of_message() );;
		return 0;
		
	}
